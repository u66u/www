{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import {\n  ComputedFields,\n  defineDocumentType,\n  makeSource,\n} from 'contentlayer/source-files'\nimport readingTime from 'reading-time'\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\nimport rehypePrettyCode, { Options } from 'rehype-pretty-code'\nimport rehypeSlug from 'rehype-slug'\nimport remarkGfm from 'remark-gfm'\n\n\n\nconst computedFields: ComputedFields = {\n  readingTime: { type: 'json', resolve: doc => readingTime(doc.body.raw) },\n  wordCount: {\n    type: 'number',\n    resolve: doc => doc.body.raw.split(/\\s+/gu).length,\n  },\n  slug: {\n    type: 'string',\n    resolve: doc => doc._raw.sourceFileName.replace(/\\.mdx$/, ''),\n  },\n}\n\nconst Writing = defineDocumentType(() => ({\n  name: 'Writing',\n  filePathPattern: 'writing/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    publishedAt: { type: 'string', required: true },\n    summary: { type: 'string', required: true },\n    image: { type: 'string', required: true },\n    category: { type: 'string', required: true },\n  },\n  computedFields,\n}))\nconst Snippet = defineDocumentType(() => ({\n  name: 'Snippet',\n  filePathPattern: 'snippet/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    publishedAt: { type: 'string', required: true },\n    category: { type: 'string', required: true },\n  },\n  computedFields,\n}))\n\nconst contentLayerConfig = makeSource({\n  contentDirPath: 'data',\n  documentTypes: [Writing, Snippet],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      rehypeSlug,\n      rehypePrettyCode,\n      [\n        rehypeAutolinkHeadings,\n        {\n          properties: {\n            className: ['anchor'],\n          },\n        },\n      ],\n    ],\n  },\n})\n\nexport default contentLayerConfig\n"],
  "mappings": ";AAAA;AAAA,EAEE;AAAA,EACA;AAAA,OACK;AACP,OAAO,iBAAiB;AACxB,OAAO,4BAA4B;AACnC,OAAO,sBAAmC;AAC1C,OAAO,gBAAgB;AACvB,OAAO,eAAe;AAItB,IAAM,iBAAiC;AAAA,EACrC,aAAa,EAAE,MAAM,QAAQ,SAAS,SAAO,YAAY,IAAI,KAAK,GAAG,EAAE;AAAA,EACvE,WAAW;AAAA,IACT,MAAM;AAAA,IACN,SAAS,SAAO,IAAI,KAAK,IAAI,MAAM,OAAO,EAAE;AAAA,EAC9C;AAAA,EACA,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,SAAO,IAAI,KAAK,eAAe,QAAQ,UAAU,EAAE;AAAA,EAC9D;AACF;AAEA,IAAM,UAAU,mBAAmB,OAAO;AAAA,EACxC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,SAAS,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC1C,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,UAAU,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,EAC7C;AAAA,EACA;AACF,EAAE;AACF,IAAM,UAAU,mBAAmB,OAAO;AAAA,EACxC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,UAAU,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,EAC7C;AAAA,EACA;AACF,EAAE;AAEF,IAAM,qBAAqB,WAAW;AAAA,EACpC,gBAAgB;AAAA,EAChB,eAAe,CAAC,SAAS,OAAO;AAAA,EAChC,KAAK;AAAA,IACH,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,YAAY;AAAA,YACV,WAAW,CAAC,QAAQ;AAAA,UACtB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,CAAC;AAED,IAAO,8BAAQ;",
  "names": []
}
